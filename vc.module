<?php
/**
 * @file vc.module
 */

/**
 * Register auto loader.
 */
spl_autoload_register('vc_autoload');

/**
 * Autoloader.
 */
function vc_autoload($class) {
  foreach (vc_get_module_apis() as $module => $info) {
    $_module = str_replace('_', ' ', $module);
    $_module = ucwords($_module);
    $_module = str_replace(' ', '', $_module);
    $path  = DRUPAL_ROOT . '/' . drupal_get_path('module', $module) . '/lib/';

    if ($_module === $class) {
      $path .= "{$class}.php";
    }
    else {
      // Find sub, remove module prefix.
      if (strpos($class, '_') !== FALSE) {
        $sub = explode('_', $class);
        array_shift($sub);
        $sub = implode('/', $sub);
      }
      else {
        $sub = substr($class, strlen($_module));
      }
      $path .= "{$sub}.php";
    }

    if (file_exists($path)) {
      include_once $path;
    }
  }
}

/**
 * Implements hook_init().
 */
function vc_init() {
  $lazy_hook =  drupal_realpath(VcLazyHook::DUMP_FILE);
  if (file_exists($lazy_hook)) {
    include_once $lazy_hook;
  }
}

/**
 * Wrapper function to work with configuration value of a module.
 *
 * @see README.txt > Configuration System
 */
function vc_conf() {
  static $handler;

  if (!$handler) {
    $handler = new VcConfig();
  }

  return $handler;
}

/**
 * Get modules support vc.
 */
function vc_get_module_apis($api = 'vc', $reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['vc'][$api])) {
      unset($cache['vc'][$api]);
    }
  }
  ctools_include('plugins');
  return ctools_plugin_api_info('vc', $api, '1.0', '1.0');
}

/**
 * Tell ctools our hook name.
 */
function vc_ctools_plugin_api_hook_name() {
  return 'vc_api';
}

/**
 * Implements vc.module\hook_vc_api().
 */
function vc_vc_api() {
  return array('version' => '1.0');
}

/**
 * Implements hook_flush_caches().
 */
function vc_flush_caches() {
  VcLazyHook::execute('flush_caches');
}























function langgo_lesson_debug() {
  $node = node_load(956);
  kpr($node);

  $terms = '';

  $content_fields = array('body');
  foreach ($content_fields as $field) {
    if (isset($node->{$field})) {
      $field = reset($node->{$field});
      $field = reset($field);
      $field = isset($field['safe_value']) ? $field['safe_value'] : $field['value'];

      // error with strip_tags with <br><p> tag. Example: <p>ab</p><p><p>cd</p>
      // Output:abcd. Correct result should be: ab cd
      $field = preg_replace('/<br[^>]*>/i',  "<br />\n", $field);
      $field = preg_replace('/<p[^>]*>/i',   "\n<p>",    $field);
      $field = preg_replace('/<\/p[^>]*>/i', "</p>\n",   $field);

      $field = filter_xss($field);
      $field = strip_tags($field);
      $terms .= $field;
    }
  }

  $terms = str_replace(array('&nbsp;', ':', '?', 'â€¦', '(', ')', ',', '.', '!', "\n"), ' ', $terms);
  $terms = strtolower($terms);
  while (strpos($terms, '  ') !== FALSE) {
    $terms = str_replace('  ', ' ', $terms);
  }

  kpr($terms);
  exit;
}
