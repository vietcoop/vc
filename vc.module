<?php
/**
 * @file vc.module
 */

include_once dirname(__FILE__) . '/lib/Lazy/Hook.php';
$lazy_hook =  drupal_realpath(Vc_Lazy_Hook::dumpFile());
if (file_exists($lazy_hook)) {
  include_once $lazy_hook;
}

/**
 * Register auto loader.
 */
spl_autoload_register('vc_autoload');

/**
 * Autoloader.
 */
function vc_autoload($class) {
  if (strpos($class, 'Drupal\\') === 0) {
    return vc_autoload_namespace($class);
  }
  elseif (strpos($class, '\\') !== FALSE) {
    // load class like Symfony\Component\Yaml\Parser in /sites/all/libraries
    $class = str_replace('\\', '/', $class);
    require_once DRUPAL_ROOT . "/sites/all/libraries/{$class}.php";
  }
  else {
    return vc_autoload_class($class);
  }
}

/**
 * Autoloader for namespace based classes.
 */
function vc_autoload_namespace($class) {
  $suffix = str_replace('\\', '/', $class) . '.php';
  foreach (vc_get_module_apis() as $module => $info) {
    if (strpos($suffix, "Drupal/{$module}/") !== FALSE) {
      $prefix = DRUPAL_ROOT . '/' . drupal_get_path('module', $module);
      $file = "{$prefix}/lib/{$suffix}";
      if (file_exists($file)) {
        require_once $file;
      }
    }
  }
}

/**
 * Autoloader for non-namespace classes.
 */
function vc_autoload_class($class) {
  foreach (vc_get_module_apis() as $module => $info) {
    $_module = str_replace('_', ' ', $module);
    $_module = ucwords($_module);
    $_module = str_replace(' ', '', $_module);
    $path  = DRUPAL_ROOT . '/' . drupal_get_path('module', $module) . '/lib/';

    if ($_module === $class) {
      $path .= "{$class}.php";
    }
    else {
      // Find sub, remove module prefix.
      if (strpos($class, '_') !== FALSE) {
        $sub = explode('_', $class);
        array_shift($sub);
        $sub = implode('/', $sub);
      }
      else {
        $sub = substr($class, strlen($_module));
      }
      $path .= "{$sub}.php";
    }

    if (file_exists($path)) {
      include_once $path;
    }
  }
}

/**
 * Wrapper function to work with configuration value of a module.
 *
 * @see README.txt > Configuration System
 */
function vc_conf($path) {
  static $config;

  if (!$config) {
    $config = new VcConfig($path);
  }

  return $config;
}

/**
 * Get modules support vc.
 */
function vc_get_module_apis($api = 'vc', $reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['vc'][$api])) {
      unset($cache['vc'][$api]);
    }
  }

  ctools_include('plugins');
  $return = ctools_plugin_api_info('vc', $api, '1.0', '1.0');

  // Make sure lazy load alway works
  $return['vc'] = array('version' => '1.0', 'path' => dirname(__FILE__));

  return $return;
}

/**
 * Tell ctools our hook name.
 */
function vc_ctools_plugin_api_hook_name() {
  return 'vc_api';
}

/**
 * Cache wrapper function
 */
function vc_cache($options = array(), $callback) {
  $args = func_get_args();
  unset($args[0], $args[1]);

  $cache_id = 'vc:cache:';
  $cache_id = substr(md5(serialize($callback) . serialize($args)), 0, 10);

  $bin = isset($options['bin']) ? $options['bin'] : 'cache';
  $expire = isset($options['expire']) ? $options['expire'] : CACHE_PERMANENT;

  if ($cache = cache_get($cache_id, $bin)) {
    return $cache->data;
  }

  $result = call_user_func_array($callback, $args);

  cache_set($cache_id, $result, $bin, $expire);
  return $result;
}

/**
 * Build lazy content.
 *
 * @param string $path
 * @return type
 */
function vc_content($path) {
  return Vc_Lazy_Content::build($path);
}

/**
 * Help function to get global variable.
 */
function vc_global($key) {
  return isset($GLOBALS[$key]) ? $GLOBALS[$key] : NULL;
}

/**
 * Legacy for yaml_parse(), yaml_parse_file().
 */
if (!function_exists('yaml_parse')) {
  function yaml_parse($string) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse($string);
  }

  function yaml_parse_file($file) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse(file_get_contents($file));
  }
}
