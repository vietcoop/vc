<?php
/**
 * @file vc.module
 */

require_once dirname(__FILE__) . '/includes/vc.autoload.inc';
require_once dirname(__FILE__) . '/includes/vc.form.inc';
require_once dirname(__FILE__) . '/includes/vc.hooks.inc';

/**
 * Wrapper function to work with configuration value of a module.
 *
 * @see README.txt > Configuration System
 */
function vc_conf($path) {
  static $config;

  if (!$config) {
    $config = new VcConfig($path);
  }

  return $config;
}

/**
 * Get modules support vc.
 */
function vc_get_module_apis($api = 'vc', $reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['vc'][$api])) {
      unset($cache['vc'][$api]);
    }
  }

  ctools_include('plugins');
  $return = ctools_plugin_api_info('vc', $api, '1.0', '1.0');

  // Make sure lazy load alway works
  $return['vc'] = array('version' => '1.0', 'path' => dirname(__FILE__));

  return $return;
}

/**
 * Wrapper function to cache
 */
function vc_cache() {
  $args = func_get_args();
  $a1   = array_shift($args);

  // Check reset flag
  $reset = !empty($_GET['nocache']);
  if (is_bool($a1)) {
    $reset = TRUE;
    $a1 = array_shift($args);
  }

  $cid  = substr(md5(serialize(array('c' => $a1, 'a' => $args))), 0, 10);

  if (!$reset && $cache = cache_get($cid)) {
    if ($cache->expire == CACHE_PERMANENT) $return = $cache->data;
    if ($cache->expire == CACHE_TEMPORARY) $return = $cache->data;
    if ($cache->expire >= time()) $return = $cache->data;
    if (!empty($return)) {
      return $return;
    }
  }

  $is_function = is_string($a1);
  $is_object = is_object($a1);

  if (!$is_function && !$is_object) {
    throw new Exception('Wrong parameter');
  }

  if ($is_function) {
    $return = call_user_func_array($a1, $args);
  }
  else {
    $method = array_shift($args);
    $return = @call_user_method_array($method, $a1, $args);
  }

  if (!is_null($return)) {
    if ($is_function) {
      if (strpos($a1, '::') !== FALSE) {
        $class = substr($a1, 0, strpos($a1, ':'));
        $method = substr($a1, strpos($a1, '::') + 2);
        $comment = new ReflectionMethod($class, $method);
      }
      else {
        $comment = new ReflectionFunction($a1);
      }
    }
    elseif ($is_object) {
      $comment = new ReflectionObject($a1);
      $comment = $comment->getMethod($method);
    }
    $comment = $comment->getDocComment();
    preg_match('/@ttl\s+(.+)\n/', $comment, $matches);
    $ttl = !empty($matches) ? strtotime(trim($matches[1], "\r\s'")) : CACHE_PERMANENT;
    cache_set($cid, $return, 'cache', $ttl);
    return $return;
  }
}

/**
 * Build lazy content.
 *
 * @param string $path
 * @return type
 */
function vc_content($path) {
  return Vc_Lazy_Content::build($path);
}

/**
 * Litle wrapper for views_ui
 */
function vc_embed_view($o) {
  $name       = $o['name'];
  $display_id = !empty($o['display_id']) ? $o['display_id'] : 'default';

  $args = func_get_args();
  array_shift($args); // remove $options

  if (!empty($o['json'])) {
    if (module_exists('views_json')) {
      return $return = views_json_get($name, $display_id, $args);
    }
  }

  $view = views_get_view($name);

  if (!$view || !$view->access($display_id)) {
    return;
  }

  if ($path = !empty($o['path']) ? $o['path'] : NULL) {
    $view->url = $view->override_path = $path;
  }

  return $view->preview($display_id, $args);
}

/**
 * Help function to get global variable.
 */
function vc_global($key) {
  return isset($GLOBALS[$key]) ? $GLOBALS[$key] : NULL;
}

/**
 * Legacy for yaml_parse(), yaml_parse_file().
 */
if (!function_exists('yaml_parse')) {
  function yaml_parse($string) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse($string);
  }

  function yaml_parse_file($file) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse(file_get_contents($file));
  }

  function yaml_parse_url($url) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse(file_get_contents($url));
  }

  function yaml_emit($data) {
    $yaml = new Symfony\Component\Yaml\Dumper();
    return $dumper->dump($data);
  }
}
