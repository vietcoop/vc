<?php
/**
 * @file vc.module
 */

/**
 * Autoloadingâ€¦
 */
include_once dirname(__FILE__) . '/vc.autoload.inc';

/**
 * Implements hook_vc_api().
 */
function vc_vc_api() {
  return array('api' => '1.0');
}

/**
 * Wrapper function to work with configuration value of a module.
 *
 * @see README.txt > Configuration System
 */
function vc_conf($path) {
  static $config;

  if (!$config) {
    $config = new VcConfig($path);
  }

  return $config;
}

/**
 * Get modules support vc.
 */
function vc_get_module_apis($api = 'vc', $reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['vc'][$api])) {
      unset($cache['vc'][$api]);
    }
  }

  ctools_include('plugins');
  $return = ctools_plugin_api_info('vc', $api, '1.0', '1.0');

  // Make sure lazy load alway works
  $return['vc'] = array('version' => '1.0', 'path' => dirname(__FILE__));

  return $return;
}

/**
 * Tell ctools our hook name.
 */
function vc_ctools_plugin_api_hook_name() {
  return 'vc_api';
}

/**
 * Cache wrapper function
 */
function vc_cache($options = array(), $callback) {
  $args = func_get_args();
  unset($args[0], $args[1]);

  $cache_id = 'vc:cache:';
  $cache_id = substr(md5(serialize($callback) . serialize($args)), 0, 10);

  $bin = isset($options['bin']) ? $options['bin'] : 'cache';
  $expire = isset($options['expire']) ? $options['expire'] : CACHE_PERMANENT;

  if ($cache = cache_get($cache_id, $bin)) {
    return $cache->data;
  }

  $result = call_user_func_array($callback, $args);

  cache_set($cache_id, $result, $bin, $expire);
  return $result;
}

/**
 * Build lazy content.
 *
 * @param string $path
 * @return type
 */
function vc_content($path) {
  return Vc_Lazy_Content::build($path);
}

/**
 * Litle wrapper for views_ui
 */
function vc_embed_view($options) {
  $name       = $options['name'];
  $display_id = !empty($options['display_id']) ? $options['display_id'] : 'default';
  $path       = !empty($options['path']) ? $options['path'] : NULL;

  $args = func_get_args();
  array_shift($args); // remove $options

  $view = views_get_view($name);
  if (!$view || !$view->access($display_id)) {
    return;
  }

  if (!empty($path)) {
    $view->override_path = $path;
  }

  return $view->preview($display_id, $args);
}

/**
 * Help function to get global variable.
 */
function vc_global($key) {
  return isset($GLOBALS[$key]) ? $GLOBALS[$key] : NULL;
}

/**
 * Legacy for yaml_parse(), yaml_parse_file().
 */
if (!function_exists('yaml_parse')) {
  function yaml_parse($string) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse($string);
  }

  function yaml_parse_file($file) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse(file_get_contents($file));
  }

  function yaml_parse_url($url) {
    $yaml = new Symfony\Component\Yaml\Parser();
    return $yaml->parse(file_get_contents($url));
  }

  function yaml_emit($data) {
    $yaml = new Symfony\Component\Yaml\Dumper();
    return $dumper->dump($data);
  }
}

/**
 *
 * @param type $form
 * @param type $form_state
 */
function vc_form_submit($form, &$form_state) {
  if (!empty($form['#vc_submit']));

  foreach ($form['#vc_submit'] as $submit) {
    call_user_func($submit, $form, $form_state);
  }
}
