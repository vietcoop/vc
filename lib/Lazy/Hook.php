<?php
/**
 * @file lib/Lazy/Hook.php
 */

class Vc_Lazy_Hook {
  const COLLECTION = 'vclazy';
  protected $is_drush = '';

  public function __construct() {
    $this->is_drush = function_exists('drush_print_r');
  }

  /**
   * Supported hooks.
   *
   * @var array
   */
  static $hooks = array(
    'block_info',
    'entity_info', 'filter_info', 'help', 'menu', 'permission', 'theme',
    'search_api_item_type_info', 'views_api'
  );

  public static function dumpFile() {
    return 'private://'. substr(md5($_SERVER['HTTP_HOST']), 0, 10) .'.vc.lazyhooks.php';
  }

  public function buildHooks() {
    if ($this->is_drush) drush_print_r("Rebuilding Lazy hooks…");

    $this->clearCode();

    foreach (self::$hooks as $hook) {
      $this->buildHook($hook);
    }

    if ($this->writeCode()) {
      if (function_exists('apc_compile_file')) {
        $file = drupal_realpath(self::dumpFile());
        apc_compile_file($file);
      }
    }

    if ($this->is_drush) drush_print_r("Lazy hooks rebuilt.");
  }

  protected function clearCode() {
    if ($this->is_drush) drush_print_r("Clear old code");

    // Clear code
    $kv = new VCKeyValue(self::COLLECTION);
    $kv->deleteAll();

    // Remove dump file
    @drupal_unlink(self::dumpFile());

    // Flush menu cache
    menu_cache_clear_all();
  }

  protected function buildHook($hook) {
    if ($this->is_drush) drush_print_r("Building hook {$hook}");

    if ($results = $this->parseData($hook)) {
      foreach ($results as $result) {
        list($module, $data) = $result;
        if ($module && $data) {
          if ($code = $this->buildCode($hook, $module, $data)) {
            if (FALSE !== $this->saveCode($hook, $module, $code)) {
              // …
            }
          }
        }
      }
    }
  }

  protected function parseData($hook) {
    if (!in_array($hook, self::$hooks)) return FALSE;

    $results = array();

    foreach (vc_get_module_apis() as $module => $info) {
      $file = drupal_get_path('module', $module);
      $file = DRUPAL_ROOT . '/' . $file . "/config/{$module}.{$hook}.yaml";
      if (file_exists($file)) {
        if ($this->is_drush) drush_print_r("Found {$file}");

        if (!$content = yaml_parse_file($file)) continue;
        $results[] = array($module, $content);
      }
    }

    return $results;
  }

  protected function buildCode($hook, $module, $items) {
    // Include helper functions.
    ctools_include('export');

    $code = array();
    $code = ctools_var_export($items, '  ');
    $code = "  return {$code};";
    $code = "function {$module}_{$hook}() {\n{$code}\n}\n\n";
    $code = "/**\n * Implements hook_permission().\n *\n */\n{$code}";

    return $code;
  }

  protected function saveCode($hook, $module, $code) {
    $kv = new VCKeyValue(self::COLLECTION);
    return $kv->set("{$module}.{$hook}", $code);
  }

  protected function writeCode() {
    $kv = new VCKeyValue(self::COLLECTION);
    $code = $kv->getAll();

    $code = implode("\n\n", $code);
    $prefix  = "<?php\n";
    $prefix .= "/**\n";
    $prefix .= " * @file vc.lazyhooks.php\n";
    $prefix .= " * Generated by vc.module\n";
    $prefix .= " *\n";
    $prefix .= " */\n\n";

    if ($this->is_drush) drush_print_r("Updating " . self::dumpFile());

    $result = file_unmanaged_save_data($prefix . $code, self::dumpFile(), FILE_EXISTS_REPLACE);

    if (!$result) {
      throw new Exception("Can not write to " . self::dumpFile());
    }

    return $result;
  }

  /**
   * Execute the lazy hooks.
   *
   * @param string $hook
   * @see vc_flush_caches().
   */
  public static function execute($hook) {
    $args = func_get_args();
    // Remove $hook from the arguments.
    unset($args[0]);

    foreach (vc_get_module_apis() as $module => $info) {
      $hook = str_replace('_', ' ', $hook);
      $hook = ucwords($hook);
      $hook = str_replace(' ', '', $hook);

      $_module = str_replace('_', ' ', $module);
      $_module = ucwords($_module);
      $_module = str_replace(' ', '', $_module);
      $class = "{$_module}_Core_{$hook}";

      if (!class_exists($class)) continue;

      foreach (get_class_methods($class) as $method) {
        if (strpos($method, 'action') !== 0) continue;

        $refl = new ReflectionMethod($class, $method);
        if ($refl->isStatic()) {
          call_user_func_array(array($class, $method), $args);
        }
      }
    }
  }

  public static function rebuild($redirect = FALSE) {
    $lazy = new Vc_Lazy_Hook();
    $lazy->buildHooks();

    // Flush cache
    drupal_flush_all_caches();

    if (!empty($redirect)) {
      drupal_goto(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '<front>');
    }
  }
}
